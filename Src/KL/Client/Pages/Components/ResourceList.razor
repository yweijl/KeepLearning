@using KL.Shared.Resources
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject HttpClient HttpClient;

<div class="d-flex justify-space-between pr-15 mt-5 align-center mb-5">
    <MudText Typo="Typo.h4">Resources</MudText>
    <AuthorizeView Policy="RequireInternalUserRole">
        <span class="mr-9">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@OnAdd">Nieuw</MudButton>
        </span>
    </AuthorizeView>
</div>

<div class="d-flex mb-5 justify-center">
    @if (_loading)
    {
        <div style="height: 50vh" class="d-flex">
            <MudProgressCircular class="d-flex align-self-center" Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
        </div>
    }
    else
    {
        <div class="d-flex flex-wrap gap-4">
            @foreach (var resource in _resources)
            {
                <MudCard Style="width: 400px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@resource.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <AuthorizeView Policy="RequireInternalUserRole">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="@(() => OnDelete(resource))"/>
                            </AuthorizeView>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Class="mb-1">@resource.Description</MudText>
                        <MudLink Href="@resource.Source" Typo="Typo.body2">@resource.Source</MudLink>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Bekijk opmerkingen</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </div>
    }
    
</div>

@code {
    private bool _loading;

    private List<Resource> _resources = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _resources = await HttpClient.GetFromJsonAsync<List<Resource>>("api/Resources") ?? new List<Resource>();
        _loading = false;
    }

    private async Task OnAdd()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddResourceForm>("Nieuwe resource", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _resources.Insert(0, (Resource)result.Data);
            Snackbar.Add("Resource toegevoegd", Severity.Info);
            StateHasChanged();
        }
    }

    private async Task OnDelete(Resource resource)
    {
        await HttpClient.DeleteAsync($"api/Resources/{resource.Id}");
        _resources.Remove(resource);
    }

}