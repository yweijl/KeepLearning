@using KL.Shared.Resources
@inject HttpClient HttpClient;
@inject ISnackbar Snackbar;

<MudDialog Style="min-width: 100px; width: 400px">
    <DialogContent >
        <EditForm sm="12" Model="@Model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Class="mb-5">
                <MudCardContent>
                    <MudTextField Label="Naam" Class="mt-3"
                                  @bind-Value="Model.Name" For="@(() => Model.Name)"/>
                    <MudTextField Label="Beschrijving"
                                  @bind-Value="Model.Description" For="@(() => Model.Description)"/>
                    <MudTextField Label="Bron" Class="mt-3"
                                  @bind-Value="Model.Source" For="@(() => Model.Source)"/>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-end">
                    <MudButton OnClick="Cancel">Annuleer</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-1">Opslaan</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>


@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    public AddResource Model { get; set; } = new ();


    private async Task OnValidSubmit(EditContext context)
    {
        var response = await HttpClient.PostAsJsonAsync("api/Resources",Model);
        if (response.IsSuccessStatusCode)
        {
            var resource = await response.Content.ReadFromJsonAsync<Resource>();
            MudDialog.Close(DialogResult.Ok(resource));
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Er is iets misgegaan: {message}", Severity.Error);
            MudDialog.Cancel();
        }
    }


    void Cancel() => MudDialog.Cancel();

}

}